#!/bin/bash

set -e

toplevel_directory="$(git rev-parse --show-cdup)"
[ -n "$toplevel_directory" ] && { echo "please run from the toplevel directory"; exit 1; }


function call()
{
    cmd="$@"
    echo "$cmd"
    eval "$cmd"
    return "$?"
}

function do_clone()
{    
    test -d .git_externals || return 1
    module=`echo $remote_url|sed 's,\(.*\)\(/trunk\|/branch.*\|/tag.*\),\1,'`
    branch=`echo $remote_url|sed 's,\(.*\)\(/trunk\|/branch.*\|/tag.*\),\2,'|sed 's,^/,,'`
    if [[ $branch = $remote_url ]]; then
        branch=""
    fi
     (
        cd .git_externals
        if [ -d "$local_directory" ]; then
            (
                cd "$local_directory"
                call git svn fetch -r HEAD --all
            )
        else
            tags="tags"
            brch="branches"
            branchpath=$(echo $branch|cut -f1 -d/)
            echo $tags|grep $branchpath >/dev/null 2>&1 && tags=$branchpath
            echo $brch|grep $branchpath >/dev/null 2>&1 && brch=$branchpath

            if [ "$module" = "$remote_url" ]; then
                # URL does not contains any trunk, branches or tags part, so we dont need
                # additional options for git-svn
                call git svn clone -r HEAD "remote_url" "$local_directory"
            else
                call git svn clone -r HEAD "$remote_url" "$local_directory"
            fi

        fi
        (
            echo ""
        )
    )
}

function do_link()
{        
    dir="$1"    

    base="$(dirname $dir)"
    (    
        echo $base

        mkdir -p "$base"
        cd $base            
                                                            
        link=$(basename $dir)
        rel=$(git rev-parse --show-cdup)
        externalsTarget="${rel}".git_externals/"${dir}"

        winlink=$(echo "$link" | sed 's/^\///' | sed 's/\//\\/g' | sed 's/^./\0/')
        winrel=$(echo "$rel" | sed 's/^\///' | sed 's/\//\\/g' | sed 's/^./\0/')
        winexternalsTarget=$(echo "$externalsTarget" | sed 's/^\///' | sed 's/\//\\/g' | sed 's/^./\0/')
        
        echo "$link"

        if [ -d "$link" ]; then
            rmdir $link    
        fi

        rm -f $winlink
        cmd //c "C:\SysInternals\junction.exe $winlink $winexternalsTarget"
    )
}

function do_excludes()
{
    dir="$1"
    git_excludes_path=.git/info/exclude
    if ! grep -q '^.git_externals$' "$git_excludes_path"
    then
        echo .git_externals >> "$git_excludes_path"
    fi

    if ! grep -q '^'"$dir"'$' "$git_excludes_path"
    then
        echo "$dir" >> "$git_excludes_path"
    fi
}

function is_excluded()
{
    local result=0
    if [ -f .git_externals_exclude ] ; then
        matches=`grep -v "^#" .git_externals_exclude|grep "^/$1$"|wc -l`
        if [ $matches -gt 0 ] ; then
            local result=1
        fi
    fi
    echo $result
    return
}


git svn show-externals | grep -vE '#|^$' |        
    while read svn_externals
do    
    number_fields="$(echo ${svn_externals}|awk '{print NF}')"
    case $number_fields in
        2)
            local_directory="$(echo ${svn_externals} | awk '{print $2}' | sed 's,^/,,')"
            revision=""
            remote_url="$(echo ${svn_externals} | awk '{print $1}' | sed 's/^\///' )"
            
            echo $local_directory
            echo $remote_url            

            ;;
        3)
            local_directory="$(echo ${svn_externals} | awk '{print $1}' | sed 's,^/,,')"
            revision=""$(echo ${svn_externals} | awk '{print $2}')
            remote_url="$(echo ${svn_externals} | awk '{print $3}')"
            ;;
        *) continue ;;
    esac

    check_excluded=$(is_excluded $local_directory)
    if [ $check_excluded -eq 0 ] ; then
        if [ -n "$USE_SSH" ]; then
            echo "Rewriting url to use SVN+SSH."
            shopt -s extglob
            remote_url="${remote_url/+(http|https)/svn+ssh}"
        fi

        [ -z "${remote_url}" ] && continue

        export local_directory revision remote_url

        echo "$local_directory -> $remote_url"

        dir=`dirname $local_directory`
        [ -d ".git_externals/$dir" ] || mkdir -p ".git_externals/$dir"

        do_clone "$revision" "$remote_url" "$local_directory" || exit
        do_link "$local_directory"
        do_excludes "$local_directory"
    fi

done